# API Documentation: Profile Management

## API Overview
This API allows for the management of user profiles, including retrieving, updating, and deleting user information.

## Base URL
`https://api.example.com` (Please replace with your actual base URL)

## Authentication
Authentication is required for all endpoints. This API uses JWT (JSON Web Tokens).

1.  **Login**: Obtain a JWT by sending user credentials to an authentication endpoint (e.g., `/api/auth/login`).
2.  **Include Token**: Include the obtained JWT in the `Authorization` header of subsequent requests, prefixed with `Bearer `.
    *   Example: `Authorization: Bearer <your_jwt_token>`

## Authentication Endpoints

### Register User (`POST /api/auth/register`)

*   **HTTP Method**: `POST`
*   **URL Path**: `/api/auth/register`
*   **Description**: Registers a new user with a specified role.
*   **Request JSON Body Structure** (Example):
    ```json
    {
      "username": "johndoe",
      "email": "john.doe@example.com",
      "password": "securePassword123",
      "role": "SELLER" // Optional. Permissible values: "VIEWER", "SELLER". Defaults to "VIEWER" if not provided or invalid.
    }
    ```
*   **Response JSON Structure** (Example on Success - 201 Created):
    ```json
    {
      "id": "newUser123",
      "username": "johndoe",
      "email": "john.doe@example.com",
      "role": "SELLER", // Reflects the role assigned
      "message": "User registered successfully"
    }
    ```
*   **HTTP Status Codes**:
    *   `201 Created`: User registered successfully.
    *   `400 Bad Request`: Invalid request body (e.g., missing fields, invalid email format, weak password, invalid role).
    *   `409 Conflict`: User with the given email already exists.
    *   `500 Internal Server Error`: Server-side error.

### Login User (`POST /api/auth/login`)

*   **HTTP Method**: `POST`
*   **URL Path**: `/api/auth/login`
*   **Description**: Authenticates a user and returns a JWT token. (This endpoint is referenced in the general Authentication section above).
*   **Request JSON Body Structure** (Example):
    ```json
    {
      "email": "john.doe@example.com",
      "password": "securePassword123"
    }
    ```
*   **Response JSON Structure** (Example on Success - 200 OK):
    ```json
    {
      "token": "eyJhbGciOiJIUzI1NiJ9...",
      "type": "Bearer",
      "id": "user123",
      "email": "john.doe@example.com",
      "role": "VIEWER" // Or SELLER, DEALER
    }
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: Authentication successful.
    *   `400 Bad Request`: Invalid request body.
    *   `401 Unauthorized`: Invalid credentials.
    *   `500 Internal Server Error`: Server-side error.

## Profile Management Endpoints

### Get User Profile (`GET /api/users/{id}`)

*   **HTTP Method**: `GET`
*   **URL Path**: `/api/users/{id}`
*   **Description**: Retrieves the profile information for a specific user.
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (string, required): The unique identifier of the user.
*   **Request JSON Body Structure**: Not applicable.
*   **Response JSON Structure** (Example on Success):
    ```json
    {
      "id": "user123",
      "username": "john.doe",
      "email": "john.doe@example.com",
      "firstName": "John",
      "lastName": "Doe",
      "createdAt": "2023-01-15T10:30:00Z",
      "updatedAt": "2023-01-20T14:45:00Z"
    }
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: User profile retrieved successfully.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: Authenticated user does not have permission to access this resource.
    *   `404 Not Found`: User with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.

### Update User Profile (`PUT /api/users/{id}`)

*   **HTTP Method**: `PUT`
*   **URL Path**: `/api/users/{id}`
*   **Description**: Updates the profile information for a specific user.
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (string, required): The unique identifier of the user whose profile is to be updated.
*   **Request JSON Body Structure** (Example):
    ```json
    {
      "email": "john.new.doe@example.com",
      "firstName": "Johnny",
      "lastName": "Doer"
    }
    ```
    *Note: Fields are optional; only provided fields will be updated.*
*   **Response JSON Structure** (Example on Success):
    ```json
    {
      "id": "user123",
      "username": "john.doe",
      "email": "john.new.doe@example.com",
      "firstName": "Johnny",
      "lastName": "Doer",
      "createdAt": "2023-01-15T10:30:00Z",
      "updatedAt": "2023-06-05T18:30:00Z"
    }
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: User profile updated successfully.
    *   `400 Bad Request`: Invalid request body (e.g., malformed JSON, invalid data types).
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: Authenticated user does not have permission to update this profile.
    *   `404 Not Found`: User with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.

### Delete Account (`DELETE /api/users/{id}`)

*   **HTTP Method**: `DELETE`
*   **URL Path**: `/api/users/{id}`
*   **Description**: Deletes the account of a specific user.
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (string, required): The unique identifier of the user whose account is to be deleted.
*   **Request JSON Body Structure**: Not applicable.
*   **Response JSON Structure**: No content on successful deletion.
*   **HTTP Status Codes**:
    *   `204 No Content`: User account deleted successfully.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: Authenticated user does not have permission to delete this account.
    *   `404 Not Found`: User with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.


## Car Management Endpoints (Seller & Dealer)

These endpoints require authentication and the user to have either `SELLER` or `DEALER` role.

### 1. Upload Car (`POST /api/cars`)
*   **HTTP Method**: `POST`
*   **URL Path**: `/api/cars`
*   **Roles**: `SELLER`, `DEALER`
*   **Description**: Allows Sellers and Dealers to upload a new car. The car will be automatically associated with the logged-in user.
*   **Request JSON Body Structure** (`CarRequestDTO.java` - See DTO for validation details):
    ```json
    {
      "make": "Toyota",
      "model": "Camry",
      "year": 2021,
      "price": 25000.00,
      "description": "Reliable family sedan, low mileage.",
      "imageUrl": "https://example.com/images/toyota_camry.jpg"
    }
    ```
*   **Response JSON Structure** (`CarResponseDTO.java` - Example on Success - 201 Created):
    ```json
    {
      "id": 1, 
      "make": "Toyota",
      "model": "Camry",
      "year": 2021,
      "price": 25000.00,
      "description": "Reliable family sedan, low mileage.",
      "imageUrl": "https://example.com/images/toyota_camry.jpg",
      "owner": {
          "id": 101, 
          "name": "Current LoggedIn Seller",
          "role": "SELLER"
      },
      "createdAt": "2025-06-05T18:30:00Z",
      "updatedAt": "2025-06-05T18:30:00Z"
    }
    ```
*   **HTTP Status Codes**:
    *   `201 Created`: Car uploaded successfully. Location header will point to the new resource.

## GraphQL API

### Overview
This section details the GraphQL API for the car selling platform. GraphQL offers a flexible way to query and mutate data, providing an alternative to the REST API for certain operations.

### Endpoint
The primary endpoint for all GraphQL operations is typically:
`POST /graphql` (This path is usually relative to the application's base URL, e.g., `https://api.example.com/graphql` if the base URL is `https://api.example.com`)

### Authentication
Authentication for GraphQL operations uses the same JWT mechanism described in the REST API section:
1.  **Obtain Token**: Use the `loginUser` mutation (GraphQL) or the `/api/auth/login` endpoint (REST) to get a JWT.
2.  **Include Token**: In subsequent GraphQL requests, include the JWT in the `Authorization` header, prefixed with `Bearer `.
    *   Example: `Authorization: Bearer <your_jwt_token>`

### Schema Overview
The complete GraphQL schema is defined in `src/main/resources/schema.graphqls`. It includes:

*   **Scalar Types**:
    *   `DateTime`: For representing date and time values.
*   **Query Operations**: For fetching data. Key queries include:
    *   `loginUser`: Authenticates a user.
    *   `getUserProfile`: Retrieves a user's profile.
    *   `listMyCars`: Lists cars for SELLER/DEALER.
    *   `listAllUsers`: (Admin) Lists all users with pagination.
*   **Mutation Operations**: For creating, updating, or deleting data. Key mutations include:
    *   `registerUser`: Creates a new user.
    *   `updateUserProfile`: Modifies user details.
    *   `deleteAccount`: Removes a user account.
    *   `uploadCar`, `updateCar`, `deleteCar`: For car management by SELLER/DEALER.
    *   `updateUserRole`, `banUser`: (Admin) For user administration.
*   **Input Types**: Structures for passing data to queries/mutations (e.g., `LoginInput`, `RegisterInput`, `CarInput`).
*   **Output Types**: Structures defining the data returned by the API (e.g., `AuthPayload`, `User`, `Car`, `UserPage`).

### Query Operations Details

#### `loginUser(input: LoginInput!): AuthPayload!`
*   **Description**: Authenticates a user based on email and password, returning a JWT and user details.
*   **Input (`LoginInput!`)**:
    ```graphql
    input LoginInput {
        email: String!
        password: String!
    }
    ```
*   **Response (`AuthPayload!`)**:
    ```graphql
    type AuthPayload {
        token: String!
        type: String!      # e.g., "Bearer"
        id: ID!
        email: String!
        role: String!
    }
    ```

#### `getUserProfile(id: ID!): User!`
*   **Description**: Retrieves detailed profile information for a specific user by their ID.
*   **Input**: `id: ID!` (User's unique identifier)
*   **Response (`User!`)**:
    ```graphql
    type User {
        id: ID!
        username: String!
        email: String!
        firstName: String
        lastName: String
        role: String!
        createdAt: DateTime!
        updatedAt: DateTime!
    }
    ```

#### `listMyCars: [Car!]!`
*   **Description**: For authenticated `SELLER` or `DEALER` roles, lists all cars they have uploaded.
*   **Input**: None (uses authenticated user context).
*   **Response (`[Car!]!`)**: An array of `Car` objects.
    ```graphql
    type Car {
        id: ID!
        make: String!
        model: String!
        year: Int!
        price: Float!
        description: String
        imageUrl: String
        owner: User! # Details of the car owner
        createdAt: DateTime!
        updatedAt: DateTime!
    }
    ```

#### `listAllUsers(page: Int, size: Int, sortBy: String, sortDir: String): UserPage!`
*   **Description**: (Admin only) Retrieves a paginated list of all users in the system. Supports sorting.
*   **Input (Optional)**:
    *   `page: Int` (Default: 0)
    *   `size: Int` (Default: 10)
    *   `sortBy: String` (Default: "id", e.g., "username", "email")
    *   `sortDir: String` (Default: "ASC", e.g., "DESC")
*   **Response (`UserPage!`)**:
    ```graphql
    type UserPage {
        content: [User!]!
        totalPages: Int!
        totalElements: Int!
        pageNumber: Int!
        pageSize: Int!
    }
    ```

### Mutation Operations Details

#### `registerUser(input: RegisterInput!): User!`
*   **Description**: Creates a new user account.
*   **Input (`RegisterInput!`)**:
    ```graphql
    input RegisterInput {
        username: String!
        email: String!
        password: String!
        role: String  # Optional, defaults to VIEWER. Allowed: "VIEWER", "SELLER", "DEALER"
    }
    ```
*   **Response (`User!`)**: The newly created `User` object.

#### `updateUserProfile(id: ID!, input: UpdateUserInput!): User!`
*   **Description**: Updates mutable profile information for a specified user.
*   **Input**:
    *   `id: ID!`: Identifier of the user to update.
    *   `input: UpdateUserInput!`: Fields to update.
        ```graphql
        input UpdateUserInput {
            email: String
            firstName: String
            lastName: String
        }
        ```
*   **Response (`User!`)**: The updated `User` object.

#### `deleteAccount(id: ID!): Boolean`
*   **Description**: Deletes a user account. Requires appropriate authorization.
*   **Input**: `id: ID!` (User's unique identifier)
*   **Response (`Boolean`)**: `true` if deletion was successful.

#### `uploadCar(input: CarInput!): Car!`
*   **Description**: Allows authenticated `SELLER` or `DEALER` to upload a new car listing.
*   **Input (`CarInput!`)**:
    ```graphql
    input CarInput {
        make: String!
        model: String!
        year: Int!
        price: Float!
        description: String
        imageUrl: String
    }
    ```
*   **Response (`Car!`)**: The newly created `Car` object.

#### `updateCar(id: ID!, input: UpdateCarInput!): Car!`
*   **Description**: Allows the owner (`SELLER` or `DEALER`) to update an existing car listing.
*   **Input**:
    *   `id: ID!`: Identifier of the car to update.
    *   `input: UpdateCarInput!`: Fields to update.
        ```graphql
        input UpdateCarInput {
            make: String
            model: String
            year: Int
            price: Float
            description: String
            imageUrl: String
        }
        ```
*   **Response (`Car!`)**: The updated `Car` object.

#### `deleteCar(id: ID!): Boolean`
*   **Description**: Allows the owner (`SELLER` or `DEALER`) to delete their car listing.
*   **Input**: `id: ID!` (Car's unique identifier)
*   **Response (`Boolean`)**: `true` if deletion was successful.

#### `updateUserRole(id: ID!, newRole: String!): User!`
*   **Description**: (Admin only) Changes the role of a specified user.
*   **Input**:
    *   `id: ID!`: User's unique identifier.
    *   `newRole: String!`: New role to assign (e.g., "VIEWER", "SELLER", "DEALER", "ADMIN").
*   **Response (`User!`)**: The `User` object with the updated role.

#### `banUser(id: ID!): Boolean`
*   **Description**: (Admin only) Bans a user. The exact mechanism (e.g., deactivation, role change) depends on implementation.
*   **Input**: `id: ID!` (User's unique identifier)
*   **Response (`Boolean`)**: `true` if banning was successful.

    *   `400 Bad Request`: Invalid request body (e.g., missing required fields, validation errors).
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not have `SELLER` or `DEALER` role.
    *   `500 Internal Server Error`: Server-side error.

### 2. Update Car (`PUT /api/cars/{id}`)
*   **HTTP Method**: `PUT`
*   **URL Path**: `/api/cars/{id}`
*   **Roles**: `SELLER`, `DEALER`
*   **Description**: Allows Sellers and Dealers to update the details of a car they own.
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (long, required): The unique identifier of the car to update.
*   **Request JSON Body Structure** (`CarRequestDTO.java` - See DTO for validation details):
    ```json
    {
      "make": "Toyota",
      "model": "Camry Hybrid",
      "year": 2021,
      "price": 25500.00,
      "description": "Updated: Reliable family sedan, low mileage, hybrid.",
      "imageUrl": "https://example.com/images/toyota_camry_hybrid.jpg"
    }
    ```
*   **Response JSON Structure** (`CarResponseDTO.java` - Example on Success - 200 OK):
    ```json
    {
      "id": 1,
      "make": "Toyota",
      "model": "Camry Hybrid",
      "year": 2021,
      "price": 25500.00,
      "description": "Updated: Reliable family sedan, low mileage, hybrid.",
      "imageUrl": "https://example.com/images/toyota_camry_hybrid.jpg",
      "owner": {
          "id": 101,
          "name": "Current LoggedIn Seller",
          "role": "SELLER"
      },
      "createdAt": "2025-06-05T18:30:00Z",
      "updatedAt": "2025-06-05T18:45:00Z"
    }
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: Car updated successfully.
    *   `400 Bad Request`: Invalid request body or path variable.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not own this car or does not have `SELLER`/`DEALER` role.
    *   `404 Not Found`: Car with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.

### 3. Delete Car (`DELETE /api/cars/{id}`)
*   **HTTP Method**: `DELETE`
*   **URL Path**: `/api/cars/{id}`
*   **Roles**: `SELLER`, `DEALER`
*   **Description**: Allows Sellers and Dealers to delete a car they own.
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (long, required): The unique identifier of the car to delete.
*   **Request JSON Body Structure**: Not applicable.
*   **Response JSON Structure**: No content on successful deletion.
*   **HTTP Status Codes**:
    *   `204 No Content`: Car deleted successfully.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not own this car or does not have `SELLER`/`DEALER` role.
    *   `404 Not Found`: Car with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.

### 4. List My Cars (`GET /api/cars/mycars`)
*   **HTTP Method**: `GET`
*   **URL Path**: `/api/cars/mycars`
*   **Roles**: `SELLER`, `DEALER`
*   **Description**: Retrieves a paginated list of cars owned by the currently authenticated Seller or Dealer.
*   **Request Parameters**:
    *   **Query Parameters** (for pagination, e.g., `page=0&size=10&sort=createdAt,desc`):
        *   `page` (integer, optional, default: 0): Page number.
        *   `size` (integer, optional, default: 10): Number of items per page.
        *   `sort` (string, optional, default: `createdAt,desc`): Sort order (e.g., `price,asc`).
*   **Request JSON Body Structure**: Not applicable.
*   **Response JSON Structure** (Paginated `CarResponseDTO` - Example on Success - 200 OK):
    ```json
    {
      "content": [
        {
          "id": 1,
          "make": "Toyota",
          "owner": { "id": 101, "name": "Current LoggedIn Seller", "role": "SELLER" }
        }
      ],
      "pageable": {
        "sort": { "sorted": true, "unsorted": false, "empty": false },
        "offset": 0,
        "pageNumber": 0,
        "pageSize": 10,
        "paged": true,
        "unpaged": false
      },
      "totalPages": 1,
      "totalElements": 1,
      "last": true,
      "size": 10,
      "number": 0,
      "sort": { "sorted": true, "unsorted": false, "empty": false },
      "numberOfElements": 1,
      "first": true,
      "empty": false
    }
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: List of cars retrieved successfully.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not have `SELLER` or `DEALER` role.
    *   `500 Internal Server Error`: Server-side error.



## Admin Management Endpoints

These endpoints are restricted to users with the `ADMIN` role.

### 1. View All Users (`GET /api/admin/users`)
*   **HTTP Method**: `GET`
*   **URL Path**: `/api/admin/users`
*   **Role**: `ADMIN`
*   **Description**: Retrieves a list of all users in the system.
*   **Request Parameters**:
    *   **Query Parameters** (Optional):
        *   `page` (integer, default: 0): Page number for pagination.
        *   `size` (integer, default: 20): Number of users per page.
        *   `sortBy` (string, default: 'id'): Field to sort by (e.g., 'email', 'name', 'role').
        *   `sortDir` (string, default: 'asc'): Sort direction ('asc' or 'desc').
*   **Request JSON Body Structure**: Not applicable.
*   **Response JSON Structure** (Example on Success - 200 OK):
    ```json
    {
      "content": [
        {
          "id": "user123",
          "name": "John Doe",
          "email": "john.doe@example.com",
          "role": "SELLER",
          "createdAt": "2023-01-15T10:30:00Z"
        },
        {
          "id": "user456",
          "name": "Jane Smith",
          "email": "jane.smith@example.com",
          "role": "DEALER",
          "createdAt": "2023-02-20T11:00:00Z"
        }
      ],
      "pageable": {
        "pageNumber": 0,
        "pageSize": 20,
        "sort": {
          "sorted": true,
          "unsorted": false,
          "empty": false
        },
        "offset": 0,
        "paged": true,
        "unpaged": false
      },
      "last": true,
      "totalPages": 1,
      "totalElements": 2,
      "size": 20,
      "number": 0,
      "sort": {
        "sorted": true,
        "unsorted": false,
        "empty": false
      },
      "first": true,
      "numberOfElements": 2,
      "empty": false
    }
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: Successfully retrieved list of users.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not have `ADMIN` role.
    *   `500 Internal Server Error`: Server-side error.

### 2. Change User Role (`PUT /api/admin/users/{id}/role`)
*   **HTTP Method**: `PUT`
*   **URL Path**: `/api/admin/users/{id}/role`
*   **Role**: `ADMIN`
*   **Description**: Changes the role of a specific user.
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (string, required): The unique identifier of the user whose role is to be changed.
*   **Request JSON Body Structure** (Example):
    ```json
    {
      "newRole": "DEALER" // Valid roles: VIEWER, SELLER, DEALER, ADMIN
    }
    ```
*   **Response JSON Structure** (Example on Success - 200 OK):
    ```json
    {
      "id": "user123",
      "name": "John Doe",
      "email": "john.doe@example.com",
      "role": "DEALER", 
      "message": "User role updated successfully."
    }
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: User role updated successfully.
    *   `400 Bad Request`: Invalid request body (e.g., missing `newRole`, invalid role specified).
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not have `ADMIN` role.
    *   `404 Not Found`: User with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.

### 3. Ban/Remove User (`DELETE /api/admin/users/{id}`)
*   **HTTP Method**: `DELETE`
*   **URL Path**: `/api/admin/users/{id}`
*   **Role**: `ADMIN`
*   **Description**: Deletes/bans a specific user account. (Consider if this is a soft delete or hard delete).
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (string, required): The unique identifier of the user to be deleted/banned.
*   **Request JSON Body Structure**: Not applicable.
*   **Response JSON Structure**: No content on successful deletion.
*   **HTTP Status Codes**:
    *   `204 No Content`: User account deleted/banned successfully.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not have `ADMIN` role.
    *   `404 Not Found`: User with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.
### 2. Update Own Car (`PUT /api/cars/{id}`)
*   **HTTP Method**: `PUT`
*   **URL Path**: `/api/cars/{id}`
*   **Roles**: `SELLER`, `DEALER`
*   **Description**: Allows Sellers and Dealers to update the details of a car they own.
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (string, required): The unique identifier of the car to update.
*   **Request JSON Body Structure** (Example - fields are optional):
    ```json
    {
      "price": 24500.00,
      "description": "Reliable family sedan, low mileage, price reduced."
    }
    ```
*   **Response JSON Structure** (Example on Success - 200 OK):
    ```json
    {
      "id": "car456",
      "make": "Toyota",
      "model": "Camry",
      "year": 2021,
      "price": 24500.00,
      "description": "Reliable family sedan, low mileage, price reduced.",
      "imageUrl": "https://example.com/images/toyota_camry.jpg",
      "ownerId": "user123",
      "createdAt": "2023-06-05T12:00:00Z",
      "updatedAt": "2023-06-05T12:05:00Z"
    }
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: Car updated successfully.
    *   `400 Bad Request`: Invalid request body.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not own the car or does not have `SELLER` or `DEALER` role.
    *   `404 Not Found`: Car with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.

### 3. Delete Own Car (`DELETE /api/cars/{id}`)
*   **HTTP Method**: `DELETE`
*   **URL Path**: `/api/cars/{id}`
*   **Roles**: `SELLER`, `DEALER`
*   **Description**: Allows Sellers and Dealers to delete a car they own.
*   **Request Parameters**:
    *   **Path Parameters**:
        *   `id` (string, required): The unique identifier of the car to delete.
*   **Request JSON Body Structure**: Not applicable.
*   **Response JSON Structure**: No content on successful deletion.
*   **HTTP Status Codes**:
    *   `204 No Content`: Car deleted successfully.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not own the car or does not have `SELLER` or `DEALER` role.
    *   `404 Not Found`: Car with the specified ID not found.
    *   `500 Internal Server Error`: Server-side error.

### 4. List Logged-in User's Cars (`GET /api/cars/my`)
*   **HTTP Method**: `GET`
*   **URL Path**: `/api/cars/my`
*   **Roles**: `SELLER`, `DEALER`
*   **Description**: Retrieves a list of cars uploaded by the currently logged-in Seller or Dealer.
*   **Request Parameters**: None.
*   **Request JSON Body Structure**: Not applicable.
*   **Response JSON Structure** (Example on Success - 200 OK):
    ```json
    [
      {
        "id": "car456",
        "make": "Toyota",
        "model": "Camry",
        "year": 2021,
        "price": 24500.00,
        "description": "Reliable family sedan, low mileage, price reduced.",
        "imageUrl": "https://example.com/images/toyota_camry.jpg",
        "ownerId": "user123",
        "createdAt": "2023-06-05T12:00:00Z",
        "updatedAt": "2023-06-05T12:05:00Z"
      },
      {
        "id": "car789",
        "make": "Honda",
        "model": "Civic",
        "year": 2020,
        "price": 19000.00,
        "description": "Sporty and fuel-efficient.",
        "imageUrl": "https://example.com/images/honda_civic.jpg",
        "ownerId": "user123",
        "createdAt": "2023-06-04T10:00:00Z",
        "updatedAt": "2023-06-04T10:00:00Z"
      }
    ]
    ```
*   **HTTP Status Codes**:
    *   `200 OK`: Successfully retrieved list of user's cars.
    *   `401 Unauthorized`: Authentication token is missing or invalid.
    *   `403 Forbidden`: User does not have `SELLER` or `DEALER` role.
    *   `500 Internal Server Error`: Server-side error.
